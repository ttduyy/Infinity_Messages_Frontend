/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllMessage } from '../fn/message-controller/get-all-message';
import { GetAllMessage$Params } from '../fn/message-controller/get-all-message';
import { getMessageByUserId } from '../fn/message-controller/get-message-by-user-id';
import { GetMessageByUserId$Params } from '../fn/message-controller/get-message-by-user-id';
import { postMessage } from '../fn/message-controller/post-message';
import { PostMessage$Params } from '../fn/message-controller/post-message';

@Injectable({ providedIn: 'root' })
export class MessageControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `postMessage()` */
  static readonly PostMessagePath = '/api/message/post';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postMessage$Response(params: PostMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return postMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postMessage(params: PostMessage$Params, context?: HttpContext): Observable<{
}> {
    return this.postMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllMessage()` */
  static readonly GetAllMessagePath = '/api/message';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMessage()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMessage$Response(params?: GetAllMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMessage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMessage(params?: GetAllMessage$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getMessageByUserId()` */
  static readonly GetMessageByUserIdPath = '/api/message/{username}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMessageByUserId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessageByUserId$Response(params: GetMessageByUserId$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getMessageByUserId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMessageByUserId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessageByUserId(params: GetMessageByUserId$Params, context?: HttpContext): Observable<{
}> {
    return this.getMessageByUserId$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
